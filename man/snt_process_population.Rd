% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/snt_process_population.R
\name{snt_process_population}
\alias{snt_process_population}
\title{Summarise population by available admin levels and build a dictionary}
\usage{
snt_process_population(
  pop_data,
  translate = TRUE,
  trans_cache_path = if (requireNamespace("here", quietly = TRUE)) {
    
    here::here("cache/translations")
 } else {
     "cache/translations"
 },
  infer_types = TRUE
)
}
\arguments{
\item{pop_data}{data.frame/tibble with \code{adm0}, optional \code{adm1}/\code{adm2}/\code{adm3},
\code{year}, and \code{pop}. \code{year} may be integer, numeric, Date/POSIXt, factor,
or character; it is coerced to integer years when feasible.}

\item{translate}{logical; when TRUE, add a French label column using the
translation cache.}

\item{trans_cache_path}{character path to the translation cache directory.
default: \code{here::here("cache/translations")} if available, else
\code{"cache/translations"}.}

\item{infer_types}{logical; when TRUE (default) coerce \code{pop_data} first using
\code{infer_col_types(apply = TRUE, return = "data")}.}
}
\value{
named list with elements (only levels present are included):
\itemize{
\item \code{pop_data_adm0}, \code{pop_data_adm1}, \code{pop_data_adm2}, \code{pop_data_adm3}
(aggregated by level and year)
\item \code{data_dictionary} (from \code{\link[=build_dictionary]{build_dictionary()}})
\item \code{levels_present} (character vector of admin levels detected)
}
}
\description{
Produces population summaries at the admin levels present in \code{pop_data}
(any of adm0..adm3) and returns a list containing per-level tables, a
bilingual (EN + optional FR) data dictionary, and a record of which
admin levels were found. By default, column types are first inferred
via \code{\link[=infer_col_types]{infer_col_types()}} with \code{apply = TRUE} and \code{return = "data"}.
}
\examples{
example_pop <- tibble::tibble(
  adm0 = c("A", "A", "B"),
  adm1 = c("X", "X", "Y"),
  adm2 = c("P", "Q", "R"),
  year = c(2020L, 2020L, 2021L),
  pop  = c(100, 50, 70)
)
out <- snt_process_population(example_pop)
names(out)
out$levels_present

}
